#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Sun Mar 11 11:42:09 2018
Algorithm For IW2018 Encrypted Networking Traffic Classification

@author: liutao
"""

# Load libraries
import pandas
import requests
import smtplib
import paho.mqtt.client as mqtt
from BaseHTTPServer import BaseHTTPRequestHandler
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.mime.application import MIMEApplication
from sklearn.externals import joblib
import threading
import json
import sys, time
import datetime

broker_address="127.0.0.1"
webdata=dict()
webdata['ssdp'] = 0
webdata['darkcomet']=0
webdata['zpanda']=0
webdata['normal']=0

def html_response():
	html='<h1 style="text-align:center;">IW2018 Encrypted Networking Traffic Classification</h1>'
        refresh='<meta http-equiv="refresh" content="5">'
	body="""
        <div style="text-align:center;">
	    <h4>Last Updated: %s</h4>
	    <div id="piechart" align="center"></div>
        <script type="text/javascript"
        src="https://www.gstatic.com/charts/loader.js"></script>
        
        <script type="text/javascript">
        // Load google charts
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawChart);
        // Draw the chart and set the chart values
        function drawChart() {
            var data = google.visualization.arrayToDataTable([
            ['Task', 'Hours per Day'],
            ['SSDP', %s],
            ['Darkcomet', %s],
            ['Zues Panda', %s],
            ['Normal', %s],
        ]);
                          
        // Optional; add a title and set the width and height of the chart
            var options = {
            'title':'Label Distributions',
            'width':600,
            'height':400,
            is3D:'True',
            sliceVisibilityThreshold: .0001
            };
        // Display the chart inside the <div> element with id="piechart"
            var chart = new google.visualization.PieChart(document.getElementById('piechart'));
            chart.draw(data, options);
        }
        </script>
        </div>
        """% (
            datetime.datetime.now(),
            webdata['ssdp'],
            webdata['darkcomet'],
            webdata['zpanda'],
            webdata['normal'])
	page = html + refresh + body
	return page

class GetHandler(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_HEAD(self):
        self._set_headers()

    def do_GET(self):
        self._set_headers()
        message = html_response()
        self.wfile.write(message.encode('utf-8'))

    def do_POST(self):
        self.do_GET()
        on_message()

def on_message():
    loaded_model = joblib.load('finalized_RFC_model.sav')
    predict_file = pandas.read_csv("update_predict_apply.csv")
    predict_label = loaded_model.predict(predict_file)

    frequency = {}
    for word in predict_label:
        count = frequency.get(word, 0)
        frequency[word] = count + 1
    print ("The flow is including : ")
    for key, value in sorted(frequency.iteritems(), key=lambda (k, v): (v, k), reverse=True):
        print "%s: %s" % (key, value)
    webdata['ssdp'] = 0
    webdata['darkcomet']=0
    webdata['zpanda']=0
    webdata['normal']=0
    webdata.update(frequency)
    if (webdata['darkcomet']+webdata['zpanda']+webdata['ssdp']) > 0:
        print("Trigger an email alert when there is malware traffic !")
        alert= '{ "malware": "'+ str(frequency)+'"}'
        r = requests.post("http://127.0.0.1:5081/notification", data=alert)
        print(r.status_code, r.reason)

if __name__ == '__main__':
    from BaseHTTPServer import HTTPServer

    server = HTTPServer(('0.0.0.0', 5080), GetHandler)
    print('Starting server, use <Ctrl-C> to stop')
    normal="update_predict_apply.csv"
    t1 = threading.Thread(target=on_message)
    t1.start()
    server.serve_forever()
